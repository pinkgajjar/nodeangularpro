(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('ngx-init', ['exports', '@angular/core'], factory) :
    (factory((global['ngx-init'] = {}),global.ng.core));
}(this, (function (exports,core) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NgxInitDirective = (function () {
        function NgxInitDirective(templateRef, viewContainer) {
            this.templateRef = templateRef;
            this.viewContainer = viewContainer;
        }
        Object.defineProperty(NgxInitDirective.prototype, "ngxInit", {
            set: /**
             * @param {?} val
             * @return {?}
             */ function (val) {
                this.viewContainer.clear();
                this.viewContainer.createEmbeddedView(this.templateRef, { ngxInit: val });
            },
            enumerable: true,
            configurable: true
        });
        NgxInitDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[ngxInit]',
                    },] },
        ];
        /** @nocollapse */
        NgxInitDirective.ctorParameters = function () {
            return [
                { type: core.TemplateRef, },
                { type: core.ViewContainerRef, },
            ];
        };
        NgxInitDirective.propDecorators = {
            "ngxInit": [{ type: core.Input },],
        };
        return NgxInitDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NgxInitModule = (function () {
        function NgxInitModule() {
        }
        NgxInitModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [],
                        declarations: [NgxInitDirective],
                        exports: [NgxInitDirective]
                    },] },
        ];
        return NgxInitModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.NgxInitDirective = NgxInitDirective;
    exports.NgxInitModule = NgxInitModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWluaXQudW1kLmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9uZ3gtaW5pdC9saWIvbmd4LWluaXQuZGlyZWN0aXZlLnRzIiwibmc6Ly9uZ3gtaW5pdC9saWIvbmd4LWluaXQubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIFRlbXBsYXRlUmVmLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tuZ3hJbml0XScsXG59KVxuZXhwb3J0IGNsYXNzIE5neEluaXREaXJlY3RpdmUge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+LFxuICAgIHByaXZhdGUgdmlld0NvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZikge1xuICB9XG5cbiAgQElucHV0KCkgc2V0IG5neEluaXQodmFsOiBhbnkpIHtcbiAgICB0aGlzLnZpZXdDb250YWluZXIuY2xlYXIoKTtcbiAgICB0aGlzLnZpZXdDb250YWluZXIuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMudGVtcGxhdGVSZWYsIHtuZ3hJbml0OiB2YWx9KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5neEluaXREaXJlY3RpdmUgfSBmcm9tICcuL25neC1pbml0LmRpcmVjdGl2ZSc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtdLFxuICBkZWNsYXJhdGlvbnM6IFtOZ3hJbml0RGlyZWN0aXZlXSxcbiAgZXhwb3J0czogW05neEluaXREaXJlY3RpdmVdXG59KVxuZXhwb3J0IGNsYXNzIE5neEluaXRNb2R1bGUge1xufVxuIl0sIm5hbWVzIjpbIkRpcmVjdGl2ZSIsIlRlbXBsYXRlUmVmIiwiVmlld0NvbnRhaW5lclJlZiIsIklucHV0IiwiTmdNb2R1bGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTtRQU1FLDBCQUNVLGFBQ0E7WUFEQSxnQkFBVyxHQUFYLFdBQVc7WUFDWCxrQkFBYSxHQUFiLGFBQWE7U0FDdEI7OEJBRVkscUNBQU87Ozs7MEJBQUMsR0FBUTtnQkFDM0IsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDM0IsSUFBSSxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUMsT0FBTyxFQUFFLEdBQUcsRUFBQyxDQUFDLENBQUM7Ozs7OztvQkFYM0VBLGNBQVMsU0FBQzt3QkFDVCxRQUFRLEVBQUUsV0FBVztxQkFDdEI7Ozs7O3dCQUowQkMsZ0JBQVc7d0JBQUVDLHFCQUFnQjs7OztnQ0FXckRDLFVBQUs7OytCQVhSOzs7Ozs7O0FDQUE7Ozs7b0JBR0NDLGFBQVEsU0FBQzt3QkFDUixPQUFPLEVBQUUsRUFBRTt3QkFDWCxZQUFZLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQzt3QkFDaEMsT0FBTyxFQUFFLENBQUMsZ0JBQWdCLENBQUM7cUJBQzVCOzs0QkFQRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9