/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
var NgxInitDirective = /** @class */ (function () {
    function NgxInitDirective(templateRef, viewContainer) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
    }
    Object.defineProperty(NgxInitDirective.prototype, "ngxInit", {
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.viewContainer.clear();
            this.viewContainer.createEmbeddedView(this.templateRef, { ngxInit: val });
        },
        enumerable: true,
        configurable: true
    });
    NgxInitDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ngxInit]',
                },] },
    ];
    /** @nocollapse */
    NgxInitDirective.ctorParameters = function () { return [
        { type: TemplateRef, },
        { type: ViewContainerRef, },
    ]; };
    NgxInitDirective.propDecorators = {
        "ngxInit": [{ type: Input },],
    };
    return NgxInitDirective;
}());
export { NgxInitDirective };
function NgxInitDirective_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    NgxInitDirective.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    NgxInitDirective.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    NgxInitDirective.propDecorators;
    /** @type {?} */
    NgxInitDirective.prototype.templateRef;
    /** @type {?} */
    NgxInitDirective.prototype.viewContainer;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWluaXQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWluaXQvIiwic291cmNlcyI6WyJsaWIvbmd4LWluaXQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7O0lBTTlFLDBCQUNVLGFBQ0E7UUFEQSxnQkFBVyxHQUFYLFdBQVc7UUFDWCxrQkFBYSxHQUFiLGFBQWE7S0FDdEI7MEJBRVkscUNBQU87Ozs7O2tCQUFDLEdBQVE7WUFDM0IsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUMzQixJQUFJLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBQyxPQUFPLEVBQUUsR0FBRyxFQUFDLENBQUMsQ0FBQzs7Ozs7O2dCQVgzRSxTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLFdBQVc7aUJBQ3RCOzs7O2dCQUowQixXQUFXO2dCQUFFLGdCQUFnQjs7OzRCQVdyRCxLQUFLOzsyQkFYUjs7U0FLYSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBUZW1wbGF0ZVJlZiwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbmd4SW5pdF0nLFxufSlcbmV4cG9ydCBjbGFzcyBOZ3hJbml0RGlyZWN0aXZlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PixcbiAgICBwcml2YXRlIHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWYpIHtcbiAgfVxuXG4gIEBJbnB1dCgpIHNldCBuZ3hJbml0KHZhbDogYW55KSB7XG4gICAgdGhpcy52aWV3Q29udGFpbmVyLmNsZWFyKCk7XG4gICAgdGhpcy52aWV3Q29udGFpbmVyLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLnRlbXBsYXRlUmVmLCB7bmd4SW5pdDogdmFsfSk7XG4gIH1cbn1cbiJdfQ==