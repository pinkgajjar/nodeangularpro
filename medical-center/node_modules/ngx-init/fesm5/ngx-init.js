import { Directive, Input, TemplateRef, ViewContainerRef, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NgxInitDirective = /** @class */ (function () {
    function NgxInitDirective(templateRef, viewContainer) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
    }
    Object.defineProperty(NgxInitDirective.prototype, "ngxInit", {
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.viewContainer.clear();
            this.viewContainer.createEmbeddedView(this.templateRef, { ngxInit: val });
        },
        enumerable: true,
        configurable: true
    });
    NgxInitDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ngxInit]',
                },] },
    ];
    /** @nocollapse */
    NgxInitDirective.ctorParameters = function () { return [
        { type: TemplateRef, },
        { type: ViewContainerRef, },
    ]; };
    NgxInitDirective.propDecorators = {
        "ngxInit": [{ type: Input },],
    };
    return NgxInitDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NgxInitModule = /** @class */ (function () {
    function NgxInitModule() {
    }
    NgxInitModule.decorators = [
        { type: NgModule, args: [{
                    imports: [],
                    declarations: [NgxInitDirective],
                    exports: [NgxInitDirective]
                },] },
    ];
    return NgxInitModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { NgxInitDirective, NgxInitModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWluaXQuanMubWFwIiwic291cmNlcyI6WyJuZzovL25neC1pbml0L2xpYi9uZ3gtaW5pdC5kaXJlY3RpdmUudHMiLCJuZzovL25neC1pbml0L2xpYi9uZ3gtaW5pdC5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW25neEluaXRdJyxcbn0pXG5leHBvcnQgY2xhc3MgTmd4SW5pdERpcmVjdGl2ZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4sXG4gICAgcHJpdmF0ZSB2aWV3Q29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmKSB7XG4gIH1cblxuICBASW5wdXQoKSBzZXQgbmd4SW5pdCh2YWw6IGFueSkge1xuICAgIHRoaXMudmlld0NvbnRhaW5lci5jbGVhcigpO1xuICAgIHRoaXMudmlld0NvbnRhaW5lci5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy50ZW1wbGF0ZVJlZiwge25neEluaXQ6IHZhbH0pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmd4SW5pdERpcmVjdGl2ZSB9IGZyb20gJy4vbmd4LWluaXQuZGlyZWN0aXZlJztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW10sXG4gIGRlY2xhcmF0aW9uczogW05neEluaXREaXJlY3RpdmVdLFxuICBleHBvcnRzOiBbTmd4SW5pdERpcmVjdGl2ZV1cbn0pXG5leHBvcnQgY2xhc3MgTmd4SW5pdE1vZHVsZSB7XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7SUFNRSwwQkFDVSxhQUNBO1FBREEsZ0JBQVcsR0FBWCxXQUFXO1FBQ1gsa0JBQWEsR0FBYixhQUFhO0tBQ3RCOzBCQUVZLHFDQUFPOzs7OztrQkFBQyxHQUFRO1lBQzNCLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDM0IsSUFBSSxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUMsT0FBTyxFQUFFLEdBQUcsRUFBQyxDQUFDLENBQUM7Ozs7OztnQkFYM0UsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxXQUFXO2lCQUN0Qjs7OztnQkFKMEIsV0FBVztnQkFBRSxnQkFBZ0I7Ozs0QkFXckQsS0FBSzs7MkJBWFI7Ozs7Ozs7QUNBQTs7OztnQkFHQyxRQUFRLFNBQUM7b0JBQ1IsT0FBTyxFQUFFLEVBQUU7b0JBQ1gsWUFBWSxFQUFFLENBQUMsZ0JBQWdCLENBQUM7b0JBQ2hDLE9BQU8sRUFBRSxDQUFDLGdCQUFnQixDQUFDO2lCQUM1Qjs7d0JBUEQ7Ozs7Ozs7Ozs7Ozs7OzsifQ==